rm(list = ls())
library("nlme")
library("grid")
library("ggplot2")
library("reshape")




### Area-based logseries distribution
LS.fun = function(n,a,A,b){
  r.a = 1/log(1+a/b)
  r.A = 1/log(1+A/b)
  p.0=1-r.A/r.a
  p = r.A/n*(1-exp(-1/r.a))^n
  mu.a = r.A*(exp(1/r.a)-1)
  mu.A = r.A*(exp(1/r.A)-1)
  var.a = (r.A-r.A^2)*exp(2/r.a)+ (2*r.A^2-r.A)*exp(1/r.a)-r.A^2
  var.a2=(r.A*exp(1/r.a)-r.A)*((1-r.A)*exp(1/r.a)+r.A)
  cv2 = exp(1/r.a)/(r.A*(exp(1/r.a)-1))-1
  list(p.0,p,mu.A=mu.A,mu.a=mu.a,var.a=var.a,var.a2=var.a2,cv2=cv2)
}

RN.Logseries=function(n,a,A=1,b)
{
  Y=rep(0, n)
  for(i in 1: n)
  {
    u2=runif(1)
    j=0; pr=LS.fun(1,a,A,b)[[1]][1]; F=pr
    if(u2<F){Y[i]=j}
    else{
      repeat{
        pr=LS.fun(j+1,a,A,b)[[2]][1]
        j=j+1; F=F+pr
        if(u2<F) break
      }
      Y[i]=j
    }
  }
  Y
}



###Truncated Logseries distribution
Trun.LS.fun2 = function(tt,n,a,A,b){
  pmf.A.LS = LS.fun(1:tt,a=A,A=A,b=b)
  pmf.a.LS = LS.fun(1:tt,a=a,A=A,b=b)
  # p=c()
  deno = 1-sum(pmf.A.LS[[2]][1:(tt-1)])
  p.0=(pmf.a.LS[[1]][1]-sum(pmf.A.LS[[2]][1:(tt-1)]*((1-a/A)^(1:(tt-1)))))/deno

  p=LS.fun(n,a=a,A=A,b=b)[[2]][1]*(1-(n<tt)*pnbinom(tt-(n+1), 
                                      size=n, prob=(a+b)/(A+b)))/deno
  
  list(p.0,p)
}

###Random number generator from the truncated logseries distribution
RN.Trun.Logseries=function(tt,n,a,A=1,b)
{
  Y=rep(0, n)
  for(i in 1:n)
  {
    u2=runif(1)
    j=0; pr=Trun.LS.fun2(tt,1,a,A,b)[[1]][1]; F=pr
    if(u2<F){Y[i]=j}
    else{
      repeat{
        pr=Trun.LS.fun2(tt,j+1,a,A,b)[[2]][1]
        j=j+1; F=F+pr
        if(u2<F) break
      }
      Y[i]=j
    }
  }
  Y
}


output = data.frame()
#############
#Africa case
beta = .3
# A=1
a=1
# cut.t = 3
S=rep(0,5)
S[c(1,3,5)] = c(4629,4301,4173)
A.case = c(1,2,10,2883570)
pi.preston = rep(0,10)
set.seed(1234)

for(beta in c(0.0019)){
  for(A in A.case){
for(tt in c(1,3,5)){
  if(tt !=1) {
    Xi = RN.Trun.Logseries(tt,S[tt],a=a,A=A,b=beta)
    } else {
  Xi = RN.Logseries(S[tt], a=a, A=A, b=beta)## species counts
    }
  Yi=Xi[Xi>0]
  Yi = sort(Yi,decreasing = T)

  output = rbind(output,cbind(A,tt,beta,Yi,ind=1:length(Yi)))  
}#tt
  }#a
}#beta


output$tt = factor(output$tt, 
                          levels = c(1,3,5), paste0("tt:",c(1,3,5)))

output$A = factor(output$A, 
                   levels = A.case, paste0("A:",A.case))

output.Africa = cbind(plot="Africa",output)

pp = ggplot(output, aes(x=(ind),y = log(Yi), group=factor(tt),colour=factor(tt)))+
  geom_line(size=0.5, aes(shape=factor(tt)))



pp = pp+facet_wrap(~A, ncol=2,nrow=2, scales = "free")


pp = pp+ theme_bw()+xlab("Species rank")+ylab("log (abundance)")+
  theme(legend.position="right",#c(1,1),#,
        # legend.justification=c(1.8,1.2),
        legend.text=element_text(color="black"),
        legend.key.size = unit(1, "cm"),
        legend.key= element_rect(linetype=0, color="white"),# lines around symbols
        legend.key.width = unit(1.1, "cm"),
        legend.margin = unit(.1, "cm"),
        legend.direction="vertical",
        plot.margin=unit(c(0.2,2,0.2,.2),"cm"),
        # panel.grid.major = element_line(colour = "white"),
        panel.spacing.x = unit(0.3, "lines"),
        strip.text.x = element_text(colour = "black", angle = 0, size = 8,
                                    hjust = 0.5, vjust = 0.5),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.title = element_text(color="white"))
# 
# 
print(pp)
setwd("~/Fisher paradox/Figure2") #path for saving the figure
save(output.Africa,file="output.Africa.S.rdata")
ggsave("SpeciesRank_Africa.S.eps",width = 10, height = 10, device="eps")





